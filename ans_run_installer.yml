---
- hosts: localhost
  gather_facts: yes
  vars:
    base_dir: "~/.os-install"
    cluster_name: "ttcd-ari"
    os_install_name: "openshift-install"
    install_dir: "{{ base_dir }}/install"
    cluster_dir:  "{{ base_dir }}/{{ cluster_name }}"
    aws_region: "us-east-1"
    pull_secret_file: "~/.aws/pull-secret.json"
    ssh_key_file: "~/.ssh/id_rsa.pub"
    ssh_key: "{{ lookup('file', ssh_key_file) }}"
    get_release: true
    create_cluster: true
  environment:
    KUBECONFIG: "{{ cluster_dir }}/auth/kubeconfig"
  tasks:
    - name: "Create install directory"
      file: 
        path: "{{ install_dir }}"
        state: directory

    - name: "Get latest release of openshift-install"
      block:
        - name: "Query github for latest installer release"
          shell:  "curl -s https://api.github.com/repos/openshift/installer/releases | jq -r '.[0].assets[0].browser_download_url' | sed 's/darwin/linux/'"
          register: os_install_release
    
        - name: "Download a the openshift installer"
          get_url: 
            url: "{{ os_install_release.stdout }}"
            dest: "{{ install_dir }}/{{ os_install_name }}"
            mode: 0775
      when: get_release
    
    - name: "Get latest openshift-install green in CI"
      block:
        - name: "Pull down latest openshift-install to pass CI"
          shell: "curl -s https://openshift-release.svc.ci.openshift.org/api/v1/releasestream/4.1.0-0.ci/latest | jq '.pullSpec' | awk -F '/' '{print $NF}' | sed 's/release\\:\\(.*\\)\"/\\1/'"
          args:
            chdir: "{{ install_dir }}"
          register: os_install_release

        - name: "Pull down latest openshift-install to pass CI"
          shell: "./oc adm release extract --tools registry.svc.ci.openshift.org/ocp/release:{{ oc_install_release.stdout }}"
          args:
            chdir: "{{ install_dir }}"

        - name: "Unarchive openshift-install-linux-{{ oc_install_release.stdout }}.tar.gz"
          unarchive:
            src: "{{ install_dir }}/openshift-install-linux-{{ oc_install_release.stdout }}.tar.gz"
            dest: "{{ install_dir }}"
      when: not get_release

    - name: "Copy the ./bin/oc to {{ install_dir }}/oc"
      copy:
        src: "./bin/oc"
        dest: "{{ install_dir }}/oc"
        mode: 0775
  
    - name: "Check the version of the openshift-install"
      shell: "./{{ os_install_name }} version"
      args:
        chdir: "{{ install_dir }}"
      register: os_install_ver

    - name: "Display version of openshift-install"
      debug:
        var: os_install_ver.stdout

    - name: "Destroy existing cluster if exists"
      shell: "./{{ os_install_name }} --dir {{ cluster_dir }} destroy cluster"
      args:
        chdir: "{{ install_dir }}"
      ignore_errors: true
      
    - name: "Cleanup previous cluster config files"
      block:
        - name: "Delete {{ cluster_dir }} directory if it exists"
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - "{{ cluster_dir }}"

        - name: "Create cluster directory"
          file:
            path: "{{ cluster_dir }}"
            state: directory

        ## doing this since lookup strips double quotes for single quotes"
        - name: "Cat pull secret file"
          shell: "cat {{ pull_secret_file }}"
          register: pull_secret

        - name: "display pull_secret"
          debug:
            var: pull_secret.stdout

        - name: "Deploy version of install-config.yaml"
          template:
            src: "templates/install-config-temp.yaml.j2"
            dest: "{{ cluster_dir }}/install-config.yaml"

    - name: "Create cluster"
      shell: "./{{ os_install_name }} --dir {{ cluster_dir }} create cluster"
      args:
        chdir: "{{ install_dir }}"
      when: create_cluster

        
