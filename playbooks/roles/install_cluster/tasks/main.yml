---
# Install OCP cluster on GCP or AWS
- name: "OpenShift Client Version"
  shell: "./oc version --client"
  args:
    chdir: "{{ ocp_install_dir }}"

- name: "Check if {{ cluster_dir }} exists"
  stat:
    path: "{{ cluster_dir }}"
  register: cluster_dir_status

- name: "Destroy existing cluster {{ cluster_dir }} but don't wait to be complete"
  shell: "./openshift-install --dir {{ cluster_dir }} destroy cluster"
  args:
    chdir: "{{ ocp_install_dir }}"
  async: 300
  poll: 0
  when: cluster_dir_status.stat.isdir is defined

- name: "Pause for cluster to completely deleted"
  pause:
    seconds: 300
  when: cluster_dir_status.stat.isdir is defined

- name: "Delete {{ cluster_dir }} directory"
  file:
    path: "{{ cluster_dir }}"
    state: absent
  when: cluster_dir_status.stat.isdir is defined

- name: "Create cluster directory"
  file:
    path: "{{ cluster_dir }}"
    state: directory

## doing this since lookup strips double quotes for single quotes"
- name: "Cat pull secret file"
  shell: "cat {{ pull_secret_file }}"
  register: pull_secret

- name: "display pull_secret"
  debug:
    var: pull_secret.stdout

- name: "Deploy cluster on AWS"
  block:
  - set_fact:
      dns_domain: "{{ aws_domain }}"

  - name: "Deploy version of install-config.yaml for AWS"
    template:
      src: "install-config-temp-aws.yaml.j2"
      dest: "{{ cluster_dir }}/install-config.yaml"
  when: install_type == "aws"

- name: "Deploy cluster on GCP"
  block:
  - set_fact:
      dns_domain: "{{ gcp_domain }}"
  - name: "Deploy version of install-config.yaml for GCP"
    template:
      src: "install-config-temp-gcp.yaml.j2"
      dest: "{{ cluster_dir }}/install-config.yaml"
  when: install_type == "gcp"

- name: "Backup install-config.yaml"
  copy:
    src: "{{ cluster_dir }}/install-config.yaml"
    dest: "{{ cluster_dir }}/install-config.yaml.backup"

- name: "Create cluster on {{ install_type }}"
  block:
  - name: "Execute openshift-install to create the cluster {{ cluster_dir }}"
    shell: "./openshift-install --dir {{ cluster_dir }} create cluster"
    args:
      chdir: "{{ ocp_install_dir }}"
    environment:
      KUBECONFIG: "{{ cluster_dir }}/auth/kubeconfig"
    register: cluster_create_result

  - set_fact:
      console_url: "https://console-openshift-console.apps.{{ cluster_name }}.{{ dns_domain }}/"
      api_url: "https://api.{{ cluster_name }}.{{ dns_domain }}:6443/"
      kubeadmin_password: "{{ lookup('file', '{{ cluster_dir }}/auth/kubeadmin-password') }}"

  - name: "Console url, API url, and kubeadmin_password to {{ cluster_dir }}/os-install.log"
    copy:
      content: |
        Console: {{ console_url }}
        API: {{ api_url }}
        kubeadmin_password: {{ kubeadmin_password }}
      dest: "{{ cluster_dir }}/cluster_creds.log"

  - debug:
      msg: "{{ item }}"
    with_items:
      - "Console: {{ console_url }}"
      - "API: {{ api_url }}"
      - "kubeadmin_password: {{ kubeadmin_password }}"

  - name: "Pause for cluster end points to be available after install"
    pause:
      seconds: 30

  when: create_cluster|bool == true