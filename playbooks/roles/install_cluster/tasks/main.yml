---
- name: "Create install directory"
  file:
    path: "{{ ocp_install_dir }}"
    state: directory

- name: "Get {{ ocp_release }} release of OCP"
  block:
    - name: "Get version and upgrade of release {{ ocp_release }}"
      shell:  "curl -s {{ ocp_rel_url }}/{{ ocp_release }}/release.txt | egrep 'Version:|Upgrades:'"
      register: ocp_release_info

    - name: "Display version and upgrade for OCP"
      debug:
        var: ocp_release_info.stdout_lines

    - name: "Download the OpenShift installer"
      get_url:
        url: "{{ ocp_rel_url }}/{{ ocp_release }}/openshift-install-linux.tar.gz"
        dest: "{{ ocp_install_dir }}"

    - name: "Unarchive the OpenShift installer"
      unarchive:
        src: "{{ ocp_install_dir }}/openshift-install-linux.tar.gz"
        dest: "{{ ocp_install_dir }}"

    - name: "Download the OpenShift oc client"
      get_url:
        url: "{{ ocp_rel_url }}/{{ ocp_release }}/openshift-client-linux.tar.gz"
        dest: "{{ ocp_install_dir }}"

    - name: "Unarchive the OpenShift oc client"
      unarchive:
        src: "{{ ocp_install_dir }}/openshift-client-linux.tar.gz"
        dest: "{{ ocp_install_dir }}"
  when: get_release|bool == true and get_ocp|bool == true

- name: "Get the {{ ocp_ci_release }} that is green in CI"
  block:
    - name: "Get OpenShift CI artifact location that last passed CI"
      shell: "curl -s {{ ocp_ci_api_rel_url }}/{{ ocp_ci_release }}/latest | jq '.pullSpec' | awk -F '/' '{print $NF}' | sed 's/release\\:\\(.*\\)\"/\\1/'"
      args:
        chdir: "{{ ocp_install_dir }}"
      register: ocp_artifact_info

    - name: "Display OpenShift CI artifact info"
      debug:
        var: ocp_artifact_info.stdout

    - name: "Keep checking until OpenShift CI artifacts are ready for download"
      shell: "curl -s {{ ocp_ci_rel_url }}/{{ ocp_artifact_info.stdout }}"
      register: oc_check_ci_release
      until: oc_check_ci_release.stdout  == ""
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: "Get version and upgrade of release {{ ocp_artifact_info.stdout }} from OpenShift CI"
      shell: "curl -s {{ ocp_ci_rel_url }}/{{ ocp_artifact_info.stdout }}/release.txt | egrep 'Version:|Upgrades:'"
      args:
        chdir: "{{ ocp_install_dir }}"
      register: ocp_release_info

    - name: "Display version and upgrade for OCP"
      debug:
        var: ocp_release_info.stdout_lines

    - name: "Download the OpenShift installer from CI"
      get_url:
        url: "{{ ocp_ci_rel_url }}/{{ ocp_artifact_info.stdout }}/openshift-install-linux-{{ ocp_artifact_info.stdout }}.tar.gz"
        dest: "{{ ocp_install_dir }}"

    - name: "Unarchive the OpenShift installer from CI"
      unarchive:
        src: "{{ ocp_install_dir }}/openshift-install-linux-{{ ocp_artifact_info.stdout }}.tar.gz"
        dest: "{{ ocp_install_dir }}"

    - name: "Download the OpenShift oc client from CI"
      get_url:
        url: "{{ ocp_ci_rel_url }}/{{ ocp_artifact_info.stdout }}/openshift-client-linux-{{ ocp_artifact_info.stdout }}.tar.gz"
        dest: "{{ ocp_install_dir }}"

    - name: "Unarchive the OpenShift oc client from CI"
      unarchive:
        src: "{{ ocp_install_dir }}/openshift-client-linux-{{ ocp_artifact_info.stdout }}.tar.gz"
        dest: "{{ ocp_install_dir }}"
  when: get_release|bool == false and get_ocp|bool == true

- name: "OpenShift openshift-install Version"
  shell: "./openshift-install version"
  args:
    chdir: "{{ ocp_install_dir }}"

- name: "OpenShift Client Version"
  shell: "./oc version --client"
  args:
    chdir: "{{ ocp_install_dir }}"

- name: "Check if {{ cluster_dir }} exists"
  stat:
    path: "{{ cluster_dir }}"
  register: cluster_dir_status

- name: "Destroy existing cluster {{ cluster_dir }} but don't wait to be complete"
  shell: "./openshift-install --dir {{ cluster_dir }} destroy cluster"
  args:
    chdir: "{{ ocp_install_dir }}"
  async: 300
  poll: 0
  when: cluster_dir_status.stat.isdir is defined

- name: "Pause for cluster to completely deleted"
  pause:
    seconds: 300
  when: cluster_dir_status.stat.isdir is defined

- name: "Delete {{ cluster_dir }} directory"
  file:
    path: "{{ cluster_dir }}"
    state: absent
  when: cluster_dir_status.stat.isdir is defined

- name: "Create cluster directory"
  file:
    path: "{{ cluster_dir }}"
    state: directory

## doing this since lookup strips double quotes for single quotes"
- name: "Cat pull secret file"
  shell: "cat {{ pull_secret_file }}"
  register: pull_secret

- name: "display pull_secret"
  debug:
    var: pull_secret.stdout

- name: "Deploy version of install-config.yaml for AWS"
  template:
    src: "install-config-temp-aws.yaml.j2"
    dest: "{{ cluster_dir }}/install-config.yaml"
  when: install_type == "aws"

- name: "Deploy version of install-config.yaml for GCP"
  template:
    src: "install-config-temp-gcp.yaml.j2"
    dest: "{{ cluster_dir }}/install-config.yaml"
  when: install_type == "gcp"

- name: "Backup install-config.yaml"
  copy:
    src: "{{ cluster_dir }}/install-config.yaml"
    dest: "{{ cluster_dir }}/install-config.yaml.backup"

- name: "Create cluster on {{ install_type }}"
  block:
  - name: "Execute openshift-install to create the cluster {{ cluster_dir }}"
    shell: "./openshift-install --dir {{ cluster_dir }} create cluster"
    args:
      chdir: "{{ ocp_install_dir }}"
    environment:
      KUBECONFIG: "{{ cluster_dir }}/auth/kubeconfig"
    register: cluster_create_result

  - set_fact:
      console_url: "https://console-openshift-console.apps.{{ cluster_name }}.devcluster.openshift.com/"
      api_url: "https://api.{{ cluster_name }}.devcluster.openshift.com:6443/"
      kubeadmin_password: "{{ lookup('file', '{{ cluster_dir }}/auth/kubeadmin-password') }}"
    when: install_type == "aws"

  - set_fact:
      console_url: "https://console-openshift-console.apps.{{ cluster_name }}.gcp.devcluster.openshift.com/"
      api_url: "https://api.{{ cluster_name }}.gcp.devcluster.openshift.com:6443/"
      kubeadmin_password: "{{ lookup('file', '{{ cluster_dir }}/auth/kubeadmin-password') }}"
    when: install_type == "gcp"

  - name: "Console url, API url, and kubeadmin_password to {{ cluster_dir }}/os-install.log"
    copy:
      content: |
        Console: {{ console_url }}
        API: {{ api_url }}
        kubeadmin_password: {{ kubeadmin_password }}
      dest: "{{ cluster_dir }}/cluster_creds.log"

  - debug:
      msg: "{{ item }}"
    with_items:
      - "Console: {{ console_url }}"
      - "API: {{ api_url }}"
      - "kubeadmin_password: {{ kubeadmin_password }}"

  - name: "Pause for cluster end points to be available after install"
    pause:
      seconds: 30

  when: create_cluster|bool == true